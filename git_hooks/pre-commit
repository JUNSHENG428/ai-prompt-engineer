#!/usr/bin/env python3
"""
Git预提交钩子
防止敏感信息（如API密钥）被提交到版本控制系统
"""

import os
import re
import sys
import subprocess
from typing import List, Tuple, Optional

# API密钥和敏感信息的模式
SECRET_PATTERNS = {
    "OpenAI API Key": r"sk-[A-Za-z0-9]{48,}",
    "DeepSeek API Key": r"sk-[A-Za-z0-9]{32,}",
    "Anthropic API Key": r"sk-ant-[A-Za-z0-9\-]{95,}",
    "Google API Key": r"AIza[A-Za-z0-9\-_]{35}",
    "AWS Access Key": r"AKIA[A-Z0-9]{16}",
    "GitHub Token": r"ghp_[A-Za-z0-9]{36}",
    "JWT Token": r"eyJ[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+",
    "Private Key": r"-----BEGIN [A-Z ]+PRIVATE KEY-----",
    "Password": r"(?i)(password|passwd|pwd)\s*[=:]\s*['\"]?[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{}|;:,.<>?]{8,}['\"]?",
    "Database URL": r"(postgresql|mysql|mongodb)://[^:]+:[^@]+@[^/]+",
}

# 排除模式（示例和文档）
EXCLUDE_PATTERNS = [
    r"example",
    r"sample", 
    r"demo",
    r"test",
    r"placeholder",
    r"your_api_key",
    r"your_key_here",
    r"replace_with",
    r"xxx",
    r"\*{3,}",
    r"\.{3,}",
    r"x{8,}",
]

# 需要检查的文件扩展名
CHECKED_EXTENSIONS = [
    ".py", ".js", ".jsx", ".ts", ".tsx", ".java", ".cpp", ".c", ".h",
    ".php", ".rb", ".go", ".rs", ".swift", ".kt", ".scala", ".sh",
    ".json", ".yaml", ".yml", ".xml", ".ini", ".cfg", ".conf",
    ".txt", ".md", ".rst", ".env", ".config"
]

# 排除的文件和目录
EXCLUDED_PATHS = [
    ".git/",
    "__pycache__/",
    "node_modules/",
    ".pyc",
    ".so",
    ".dll",
    ".exe",
    ".bin",
    ".class",
    ".jar",
    ".war"
]

class Colors:
    """终端颜色常量"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def get_staged_files() -> List[str]:
    """获取暂存区的文件列表"""
    try:
        result = subprocess.run(
            ["git", "diff", "--cached", "--name-only"],
            capture_output=True,
            text=True,
            check=True
        )
        return [f.strip() for f in result.stdout.split('\n') if f.strip()]
    except subprocess.CalledProcessError:
        return []

def should_check_file(file_path: str) -> bool:
    """判断是否应该检查该文件"""
    # 检查是否被排除
    for excluded in EXCLUDED_PATHS:
        if excluded in file_path:
            return False
    
    # 检查文件扩展名
    _, ext = os.path.splitext(file_path)
    return ext.lower() in CHECKED_EXTENSIONS

def is_likely_example(line: str, match_text: str) -> bool:
    """判断是否可能是示例代码"""
    line_lower = line.lower()
    
    # 检查注释
    if any(comment in line for comment in ['#', '//', '/*', '*', '<!--']):
        return True
    
    # 检查示例标识
    if any(pattern in line_lower for pattern in EXCLUDE_PATTERNS):
        return True
    
    # 检查匹配的文本是否包含占位符模式
    for pattern in EXCLUDE_PATTERNS:
        if re.search(pattern, match_text, re.IGNORECASE):
            return True
    
    return False

def scan_file_content(file_path: str) -> List[Tuple[int, str, str, str]]:
    """
    扫描文件内容，寻找敏感信息
    
    Returns:
        List of (line_number, pattern_name, match_text, line_content)
    """
    if not os.path.exists(file_path):
        return []
    
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
        
        for line_num, line in enumerate(lines, 1):
            for pattern_name, pattern in SECRET_PATTERNS.items():
                matches = re.finditer(pattern, line)
                
                for match in matches:
                    match_text = match.group()
                    
                    # 跳过可能的示例
                    if is_likely_example(line, match_text):
                        continue
                    
                    issues.append((line_num, pattern_name, match_text, line.strip()))
    
    except (OSError, UnicodeDecodeError):
        pass
    
    return issues

def mask_secret(secret: str) -> str:
    """遮蔽敏感信息显示"""
    if len(secret) <= 8:
        return "*" * len(secret)
    return secret[:4] + "*" * (len(secret) - 8) + secret[-4:]

def print_issue(file_path: str, line_num: int, pattern_name: str, match_text: str, line_content: str):
    """打印安全问题"""
    print(f"{Colors.RED}❌ 发现敏感信息: {pattern_name}{Colors.END}")
    print(f"   {Colors.CYAN}文件:{Colors.END} {file_path}")
    print(f"   {Colors.CYAN}行号:{Colors.END} {line_num}")
    print(f"   {Colors.CYAN}内容:{Colors.END} {mask_secret(match_text)}")
    print(f"   {Colors.YELLOW}上下文:{Colors.END} {line_content}")
    print()

def main():
    """主函数"""
    print(f"{Colors.BLUE}🔍 正在检查暂存文件中的敏感信息...{Colors.END}")
    
    # 获取暂存文件
    staged_files = get_staged_files()
    
    if not staged_files:
        print(f"{Colors.GREEN}✅ 没有暂存文件需要检查{Colors.END}")
        return 0
    
    total_issues = 0
    checked_files = 0
    
    for file_path in staged_files:
        if not should_check_file(file_path):
            continue
        
        checked_files += 1
        issues = scan_file_content(file_path)
        
        if issues:
            print(f"{Colors.YELLOW}⚠️ 在文件 {file_path} 中发现问题:{Colors.END}")
            for line_num, pattern_name, match_text, line_content in issues:
                print_issue(file_path, line_num, pattern_name, match_text, line_content)
                total_issues += 1
    
    print(f"{Colors.CYAN}📊 检查统计:{Colors.END}")
    print(f"   检查文件数: {checked_files}")
    print(f"   发现问题数: {total_issues}")
    
    if total_issues > 0:
        print(f"\n{Colors.RED}🚫 提交被阻止！{Colors.END}")
        print(f"{Colors.YELLOW}请处理上述敏感信息后再次提交。{Colors.END}")
        print(f"\n{Colors.WHITE}建议的解决方案:{Colors.END}")
        print(f"1. 将敏感信息移至环境变量")
        print(f"2. 使用配置文件（确保在.gitignore中）")
        print(f"3. 使用安全的密钥管理服务")
        print(f"4. 如果是示例代码，请添加明确的示例标识")
        print(f"\n{Colors.CYAN}跳过检查（不推荐）:{Colors.END}")
        print(f"git commit --no-verify")
        return 1
    else:
        print(f"{Colors.GREEN}✅ 安全检查通过，允许提交{Colors.END}")
        return 0

if __name__ == "__main__":
    sys.exit(main()) 